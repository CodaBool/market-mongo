name: next-market
on:
  push:
    branches: [dev, prod]
jobs:
  deploy:
    if: "! contains(github.event.commits[0].message, '[no ci]')"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      # The stage is extracted from the branch name, since deploys are only ran on dev and prod branch
      # WARNING: if deployments are done differently then this needs to be edited (hardcoded or from github event context)
      - name: Extract Pipline Vars
        # The repo name must be validated since it will be used in the S3 Bucket creation when saving Serverless state
        # Repo name must follow S3 Naming conventions, no space + no uppercase
        # Lower Cases the Repo name, Github already removes space
        run: |
          repo=${GITHUB_REPOSITORY#CodaBool/}
          echo "##[set-output name=repo;]${repo,,}" 
          echo "##[set-output name=stage;]${GITHUB_REF#refs/heads/}"
          build=$(echo "${SHA:0:7}.${RUN_NUMBER}"|tr -d '"') # removes an annoying double quote
          echo "##[set-output name=build;]${build}"
          
        id: extract # allows use of ${{ steps.extract.outputs.stage }} for pipeline stage/repo
        env:
          SHA: ${{ toJSON(github.sha) }}
          RUN_NUMBER: ${{ toJSON(github.run_number) }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - uses: actions/setup-node@v2-beta
        with:
          node-version: '12'

      - name: Get Stripe Allow List
        id: allow # use ${{ steps.allow.outputs.ips_webhooks }} or ${{ steps.allow.outputs.ips_api }} for stripe allowlist
        run: |
          jq --version
          sudo apt-get install jq
          ips_webhooks=$(curl https://stripe.com/files/ips/ips_webhooks.json | jq '.WEBHOOKS | join(",")')
          ips_api=$(curl https://stripe.com/files/ips/ips_api.json | jq '.API | join(",")')
          echo "Allowed webhook ips = "${ips_webhooks}
          echo "Allowed api ips = "${ips_api}
          echo "##[set-output name=ips_webhooks;]${ips_webhooks}"
          echo "##[set-output name=ips_api;]${ips_api}"

      - name: Serverless AWS authentication
        run: npx serverless --component=serverless-next config credentials --provider aws --key ${{ secrets.AWS_ACCESS_KEY_ID }} --secret ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # - name: Install dependencies
      #   run: npm ci

      # - name: Download `.serverless` state from S3
      #   run: |
      #     aws s3api head-object --bucket sls-state --key ${{ steps.extract.outputs.repo }}/${{ steps.extract.outputs.stage }}/.serverless/_.json || not_exist=true
      #     if [ ! $not_exist ]; then
      #       aws s3 sync s3://sls-state/${{ steps.extract.outputs.repo }}/${{ steps.extract.outputs.stage }}/.serverless .serverless --delete 
      #     fi
          
      # - name: Deploy app to AWS
      #   # run: npx serverless # for verbose deploys
      #   run: npx serverless > output && sed '/› Deploying\|aNA/d' output # sed removes the obnoxious output of sls ("aNA" and "*› Deploying*")
      #   env:
      #     NEXT_PUBLIC_STRIPE_PK: ${{ secrets.NEXT_PUBLIC_STRIPE_PK }}
      #     NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
      #     STAGE: ${{ steps.extract.outputs.stage }}
      #     REPO: ${{ steps.extract.outputs.repo }}
      #     MONGODB_URI: ${{ secrets.MONGODB_URI }}
      #     STRIPE_SK: ${{ secrets.STRIPE_SK }}
      #     JWT_SIGNING_PK: ${{ secrets.JWT_SIGNING_PK }}
      #     JWT_SECRET: ${{ secrets.JWT_SECRET }}
      #     RECAPTCHA_SK: ${{ secrets.RECAPTCHA_SK }}
      #     BUILD_ID: ${{ steps.extract.outputs.build }}


      # - name: Upload `.serverless` state to S3
      #   run: aws s3 sync .serverless s3://sls-state/${{ steps.extract.outputs.repo }}/${{ steps.extract.outputs.stage }}/.serverless --delete

      # ==== WEBHOOK ====

      - uses: dorny/paths-filter@v2
        id: webhookChange
        with:
          filters: |
            src:
              - 'webhook/**'

      - name: Deploy webhook to AWS
        if: "contains(github.event.commits[0].message, '[hook]') || steps.webhookChange.outputs.src == 'true' "
        working-directory: ./webhook
        run: |
          npm ci
          npx serverless deploy
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          BUILD_ID: ${{ steps.extract.outputs.build }}
          REPO: ${{ steps.extract.outputs.repo }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          STRIPE_SK: ${{ secrets.STRIPE_SK }}
          STRIPE_WH: ${{ secrets.STRIPE_WH }}
          ALLOW_LIST: ${{ steps.allow.outputs.ips_webhooks }}
          WEBHOOK_DOMAIN: ${{ steps.extract.outputs.stage == 'prod' && 'prodhook.codattest.com' || 'devhook.codattest.com' }}